POCETAK
**********

KLIJENT - KLIJENT FORMA
**********

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package forma;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import komunikacija.Komunikacija;
import konstante.Konstante;
import model.ModelTabeleKlijent;
import transfer.KlijentskiTransferObjekat;
import transfer.ServerskiTransferObjekat;

/**
 *
 * @author Nina777
 */
public class KlijentForma extends javax.swing.JFrame {

    /**
     * Creates new form KlijentForma
     */
    public KlijentForma() {
        initComponents();
        popuniCB();
        srediTabelu();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jtTabela = new javax.swing.JTable();
        jbtnDodaj = new javax.swing.JButton();
        jbtnObrisi = new javax.swing.JButton();
        jbtnSacuvaj = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jtTabela.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jtTabela);

        jbtnDodaj.setText("Dodaj");
        jbtnDodaj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnDodajActionPerformed(evt);
            }
        });

        jbtnObrisi.setText("Obrisi");
        jbtnObrisi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnObrisiActionPerformed(evt);
            }
        });

        jbtnSacuvaj.setText("Sacuvaj");
        jbtnSacuvaj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnSacuvajActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jbtnDodaj)
                        .addGap(112, 112, 112)
                        .addComponent(jbtnObrisi))
                    .addComponent(jbtnSacuvaj))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(169, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbtnDodaj)
                    .addComponent(jbtnObrisi))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jbtnSacuvaj)
                .addGap(23, 23, 23))
        );

        pack();
    }// </editor-fold>                        

    private void jbtnObrisiActionPerformed(java.awt.event.ActionEvent evt) {                                           
        ModelTabeleKlijent mtk = (ModelTabeleKlijent) jtTabela.getModel();

        int red = jtTabela.getSelectedRow();

        if (red == -1) {
            JOptionPane.showMessageDialog(this, "Odaberite red");
        } else {
            mtk.obrisiRed(red);
        }
    }                                          

    private void jbtnDodajActionPerformed(java.awt.event.ActionEvent evt) {                                          
        ModelTabeleKlijent mtk = (ModelTabeleKlijent) jtTabela.getModel();
        mtk.dodajRed();

//        moguce da ovde zove kombo za tabelu popuniCBuTabeli();
    }                                         

    private void jbtnSacuvajActionPerformed(java.awt.event.ActionEvent evt) {                                            
//        TODO: Odkomentarisati ovaj try-catch i pogledaj pod *****
//        validacije();
//        try {

            ModelTabeleKlijent mtk = (ModelTabeleKlijent) jtTabela.getModel();
            KlijentskiTransferObjekat kto = new KlijentskiTransferObjekat();
//            ArrayList<StavkaRacuna> listaStavki = mtk.getListaStavki();
//
//            int id = Integer.parseInt(jtfSifraRacuna.getText());
//
//            SimpleDateFormat sdf = new SimpleDateFormat("dd.MM.yyyy");
//            Date datum = sdf.parse(jtfDatum.getText());
//            Klijent kl = (Klijent) cbKlijent.getSelectedItem();
//            Double ukIzn = 0.0;
//            for (StavkaRacuna stav : listaStavki) {
//                ukIzn += stav.getIznos();
//            }
//
//            Racun racun = new Racun(id, datum, kl, ukIzn);
//
//            for (StavkaRacuna sr : listaStavki) {
//                sr.setRacun(racun);
//            }
//
//            ***** U ZAVISNOSTI OD TOGA STA CUVAMO salje se Konstanta.SACUVAJ_KLASA
//                  Pre toga je potrebno napuniti taj objekat
            
//            kto.setOperacija(Konstante.SACUVAJ_RACUN);
//            kto.setParametar(racun);
//
            Komunikacija.getInstanca().posaljiZahtev(kto);
            ServerskiTransferObjekat sto = Komunikacija.getInstanca().primiOdgovor();
            JOptionPane.showMessageDialog(this, sto.getPoruka());
//
//            kto.setOperacija(Konstante.SACUVAJ_STAVKE);
//            kto.setParametar(listaStavki);

            Komunikacija.getInstanca().posaljiZahtev(kto);
            sto = Komunikacija.getInstanca().primiOdgovor();
            JOptionPane.showMessageDialog(this, sto.getPoruka());

            boolean sacuvano = (boolean) sto.getOdgovor();
            if (sacuvano) {
//                promeniEnabled(true); ukoliko se menja da je neko polje disabled
                mtk.skloniPodatke();
            }
//        } catch (ParseException ex) {
//            Logger.getLogger(KlijentForma.class.getName()).log(Level.SEVERE, null, ex);
//        }
    }                                           

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(KlijentForma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(KlijentForma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(KlijentForma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(KlijentForma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new KlijentForma().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbtnDodaj;
    private javax.swing.JButton jbtnObrisi;
    private javax.swing.JButton jbtnSacuvaj;
    private javax.swing.JTable jtTabela;
    // End of variables declaration                   

    private void popuniCB() {
//        TODO: U zavisnosti od CB odaberi KLASU IZ DOMENA, i Konstanta VRATI_KLASA
//        KlijentskiTransferObjekat kto = new KlijentskiTransferObjekat();
//        kto.setOperacija(Konstante.VRATI_KLIJENTE);
//
//        Komunikacija.getInstanca().posaljiZahtev(kto);
//
//        ServerskiTransferObjekat sto = Komunikacija.getInstanca().primiOdgovor();
//
//        ArrayList<Klijent> lista = (ArrayList<Klijent>) sto.getOdgovor();
//
//        cbKlijent.removeAllItems();
//
//        for (Klijent kl : lista) {
//            cbKlijent.addItem(kl);
//        }
    }

    private void srediTabelu() {
        ModelTabeleKlijent mtk = new ModelTabeleKlijent();
        jtTabela.setModel(mtk);
    }

    private void popuniCBuTabeli() {
//        TODO: U zavisnosti od CB odaberi KLASU IZ DOMENA, i Konstanta VRATI_KLASA

//        jtTabela.setModel(mtk);
//        KlijentskiTransferObjekat kto = new KlijentskiTransferObjekat();
//        kto.setOperacija(Konstante.VRATI_INZENJERE);
//
//        Komunikacija.getInstanca().posaljiZahtev(kto);
//
//        ServerskiTransferObjekat sto = Komunikacija.getInstanca().primiOdgovor();
//
//        ArrayList<Inzenjer> listaInz = (ArrayList<Inzenjer>) sto.getOdgovor();
//
//        JComboBox kombo = new JComboBox();
//        kombo.removeAllItems();
//        for (Inzenjer inz : listaInz) {
//            kombo.addItem(inz);
//        }
//
//        TableColumnModel tcm = jtTabela.getColumnModel();
//        TODO: promeni broj kolone shodno tome koja se menja
//        TableColumn kolona = tcm.getColumn(1);
//        kolona.setCellEditor(new DefaultCellEditor(kombo));
    }

//    * metoda za promenu da se polje vise ne moze popuniti
    private void promeniEnabled(boolean b) {
//        jtfNaziv.setEnabled(b);

    }

//    *PRONADJI DUGME
//    private void jbtnPronadjiActionPerformed(java.awt.event.ActionEvent evt) {                                             
//        int sifra = Integer.parseInt(jtfSifraRacuna.getText());
//
//        KlijentskiTransferObjekat kto = new KlijentskiTransferObjekat();
//        kto.setOperacija(Konstante.VRATI_RACUN);
//        kto.setParametar(sifra);
//
//        Komunikacija.getInstanca().posaljiZahtev(kto);
//
//        ServerskiTransferObjekat sto = Komunikacija.getInstanca().primiOdgovor();
//        Racun racun = (Racun) sto.getOdgovor();
//        jtfDatum.setText(new SimpleDateFormat("dd.MM.yyyy").format(racun.getDatum()));
//
//        cbKlijent.setSelectedItem(racun.getKlijent());
//
//        kto.setOperacija(Konstante.VRATI_STAVKE);
//        Komunikacija.getInstanca().posaljiZahtev(kto);
//        ServerskiTransferObjekat sto2 = Komunikacija.getInstanca().primiOdgovor();
//        ArrayList<StavkaRacuna> listaStavki = (ArrayList<StavkaRacuna>) sto2.getOdgovor();
//
//        ArrayList<StavkaRacuna> listaStavkiModif = new ArrayList<>();
//
//        for (StavkaRacuna sr : listaStavki) {
//            if (sr.getRacun().getRacunID() == sifra) {
//                listaStavkiModif.add(sr);
//            }
//        }
//        ModelTabeleKlijent mtk = new ModelTabeleKlijent();
//        mtk.setListaStavki(listaStavkiModif);
//        jtTabela.setModel(mtk);
//    }
    
    public void validacije(){
//        try {
//            datumDo = sdf.parse(jtxtDatumDo.getText());
//            datumOd = sdf.parse(jtxtDatumOD.getText());
//        } catch (ParseException ex) {
//            JOptionPane.showMessageDialog(this, "Los format datumea");
//            return;
//        }
//        if(datumOd.compareTo(datumDo) != -1){
//         JOptionPane.showMessageDialog(this, "dat od veci");
//            return;
//        }
//        
//        if(datumOd.compareTo(new Date()) != 1){
//         JOptionPane.showMessageDialog(this, "dat od mora biti veci od sadanjeg datuma");
//            return;
//        }
    }
}



**********

KLIJENT - KOMUNIKACIJA
**********


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package forma;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import komunikacija.Komunikacija;
import konstante.Konstante;
import model.ModelTabeleKlijent;
import transfer.KlijentskiTransferObjekat;
import transfer.ServerskiTransferObjekat;

/**
 *
 * @author Nina777
 */
public class KlijentForma extends javax.swing.JFrame {

    /**
     * Creates new form KlijentForma
     */
    public KlijentForma() {
        initComponents();
        popuniCB();
        srediTabelu();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jtTabela = new javax.swing.JTable();
        jbtnDodaj = new javax.swing.JButton();
        jbtnObrisi = new javax.swing.JButton();
        jbtnSacuvaj = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jtTabela.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jtTabela);

        jbtnDodaj.setText("Dodaj");
        jbtnDodaj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnDodajActionPerformed(evt);
            }
        });

        jbtnObrisi.setText("Obrisi");
        jbtnObrisi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnObrisiActionPerformed(evt);
            }
        });

        jbtnSacuvaj.setText("Sacuvaj");
        jbtnSacuvaj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnSacuvajActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jbtnDodaj)
                        .addGap(112, 112, 112)
                        .addComponent(jbtnObrisi))
                    .addComponent(jbtnSacuvaj))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(169, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbtnDodaj)
                    .addComponent(jbtnObrisi))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jbtnSacuvaj)
                .addGap(23, 23, 23))
        );

        pack();
    }// </editor-fold>                        

    private void jbtnObrisiActionPerformed(java.awt.event.ActionEvent evt) {                                           
        ModelTabeleKlijent mtk = (ModelTabeleKlijent) jtTabela.getModel();

        int red = jtTabela.getSelectedRow();

        if (red == -1) {
            JOptionPane.showMessageDialog(this, "Odaberite red");
        } else {
            mtk.obrisiRed(red);
        }
    }                                          

    private void jbtnDodajActionPerformed(java.awt.event.ActionEvent evt) {                                          
        ModelTabeleKlijent mtk = (ModelTabeleKlijent) jtTabela.getModel();
        mtk.dodajRed();

//        moguce da ovde zove kombo za tabelu popuniCBuTabeli();
    }                                         

    private void jbtnSacuvajActionPerformed(java.awt.event.ActionEvent evt) {                                            
//        TODO: Odkomentarisati ovaj try-catch i pogledaj pod *****
//        validacije();
//        try {

            ModelTabeleKlijent mtk = (ModelTabeleKlijent) jtTabela.getModel();
            KlijentskiTransferObjekat kto = new KlijentskiTransferObjekat();
//            ArrayList<StavkaRacuna> listaStavki = mtk.getListaStavki();
//
//            int id = Integer.parseInt(jtfSifraRacuna.getText());
//
//            SimpleDateFormat sdf = new SimpleDateFormat("dd.MM.yyyy");
//            Date datum = sdf.parse(jtfDatum.getText());
//            Klijent kl = (Klijent) cbKlijent.getSelectedItem();
//            Double ukIzn = 0.0;
//            for (StavkaRacuna stav : listaStavki) {
//                ukIzn += stav.getIznos();
//            }
//
//            Racun racun = new Racun(id, datum, kl, ukIzn);
//
//            for (StavkaRacuna sr : listaStavki) {
//                sr.setRacun(racun);
//            }
//
//            ***** U ZAVISNOSTI OD TOGA STA CUVAMO salje se Konstanta.SACUVAJ_KLASA
//                  Pre toga je potrebno napuniti taj objekat
            
//            kto.setOperacija(Konstante.SACUVAJ_RACUN);
//            kto.setParametar(racun);
//
            Komunikacija.getInstanca().posaljiZahtev(kto);
            ServerskiTransferObjekat sto = Komunikacija.getInstanca().primiOdgovor();
            JOptionPane.showMessageDialog(this, sto.getPoruka());
//
//            kto.setOperacija(Konstante.SACUVAJ_STAVKE);
//            kto.setParametar(listaStavki);

            Komunikacija.getInstanca().posaljiZahtev(kto);
            sto = Komunikacija.getInstanca().primiOdgovor();
            JOptionPane.showMessageDialog(this, sto.getPoruka());

            boolean sacuvano = (boolean) sto.getOdgovor();
            if (sacuvano) {
//                promeniEnabled(true); ukoliko se menja da je neko polje disabled
                mtk.skloniPodatke();
            }
//        } catch (ParseException ex) {
//            Logger.getLogger(KlijentForma.class.getName()).log(Level.SEVERE, null, ex);
//        }
    }                                           

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(KlijentForma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(KlijentForma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(KlijentForma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(KlijentForma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new KlijentForma().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbtnDodaj;
    private javax.swing.JButton jbtnObrisi;
    private javax.swing.JButton jbtnSacuvaj;
    private javax.swing.JTable jtTabela;
    // End of variables declaration                   

    private void popuniCB() {
//        TODO: U zavisnosti od CB odaberi KLASU IZ DOMENA, i Konstanta VRATI_KLASA
//        KlijentskiTransferObjekat kto = new KlijentskiTransferObjekat();
//        kto.setOperacija(Konstante.VRATI_KLIJENTE);
//
//        Komunikacija.getInstanca().posaljiZahtev(kto);
//
//        ServerskiTransferObjekat sto = Komunikacija.getInstanca().primiOdgovor();
//
//        ArrayList<Klijent> lista = (ArrayList<Klijent>) sto.getOdgovor();
//
//        cbKlijent.removeAllItems();
//
//        for (Klijent kl : lista) {
//            cbKlijent.addItem(kl);
//        }
    }

    private void srediTabelu() {
        ModelTabeleKlijent mtk = new ModelTabeleKlijent();
        jtTabela.setModel(mtk);
    }

    private void popuniCBuTabeli() {
//        TODO: U zavisnosti od CB odaberi KLASU IZ DOMENA, i Konstanta VRATI_KLASA

//        jtTabela.setModel(mtk);
//        KlijentskiTransferObjekat kto = new KlijentskiTransferObjekat();
//        kto.setOperacija(Konstante.VRATI_INZENJERE);
//
//        Komunikacija.getInstanca().posaljiZahtev(kto);
//
//        ServerskiTransferObjekat sto = Komunikacija.getInstanca().primiOdgovor();
//
//        ArrayList<Inzenjer> listaInz = (ArrayList<Inzenjer>) sto.getOdgovor();
//
//        JComboBox kombo = new JComboBox();
//        kombo.removeAllItems();
//        for (Inzenjer inz : listaInz) {
//            kombo.addItem(inz);
//        }
//
//        TableColumnModel tcm = jtTabela.getColumnModel();
//        TODO: promeni broj kolone shodno tome koja se menja
//        TableColumn kolona = tcm.getColumn(1);
//        kolona.setCellEditor(new DefaultCellEditor(kombo));
    }

//    * metoda za promenu da se polje vise ne moze popuniti
    private void promeniEnabled(boolean b) {
//        jtfNaziv.setEnabled(b);

    }

//    *PRONADJI DUGME
//    private void jbtnPronadjiActionPerformed(java.awt.event.ActionEvent evt) {                                             
//        int sifra = Integer.parseInt(jtfSifraRacuna.getText());
//
//        KlijentskiTransferObjekat kto = new KlijentskiTransferObjekat();
//        kto.setOperacija(Konstante.VRATI_RACUN);
//        kto.setParametar(sifra);
//
//        Komunikacija.getInstanca().posaljiZahtev(kto);
//
//        ServerskiTransferObjekat sto = Komunikacija.getInstanca().primiOdgovor();
//        Racun racun = (Racun) sto.getOdgovor();
//        jtfDatum.setText(new SimpleDateFormat("dd.MM.yyyy").format(racun.getDatum()));
//
//        cbKlijent.setSelectedItem(racun.getKlijent());
//
//        kto.setOperacija(Konstante.VRATI_STAVKE);
//        Komunikacija.getInstanca().posaljiZahtev(kto);
//        ServerskiTransferObjekat sto2 = Komunikacija.getInstanca().primiOdgovor();
//        ArrayList<StavkaRacuna> listaStavki = (ArrayList<StavkaRacuna>) sto2.getOdgovor();
//
//        ArrayList<StavkaRacuna> listaStavkiModif = new ArrayList<>();
//
//        for (StavkaRacuna sr : listaStavki) {
//            if (sr.getRacun().getRacunID() == sifra) {
//                listaStavkiModif.add(sr);
//            }
//        }
//        ModelTabeleKlijent mtk = new ModelTabeleKlijent();
//        mtk.setListaStavki(listaStavkiModif);
//        jtTabela.setModel(mtk);
//    }
    
    public void validacije(){
//        try {
//            datumDo = sdf.parse(jtxtDatumDo.getText());
//            datumOd = sdf.parse(jtxtDatumOD.getText());
//        } catch (ParseException ex) {
//            JOptionPane.showMessageDialog(this, "Los format datumea");
//            return;
//        }
//        if(datumOd.compareTo(datumDo) != -1){
//         JOptionPane.showMessageDialog(this, "dat od veci");
//            return;
//        }
//        
//        if(datumOd.compareTo(new Date()) != 1){
//         JOptionPane.showMessageDialog(this, "dat od mora biti veci od sadanjeg datuma");
//            return;
//        }
    }
}


**********

KLIJENT - MODEL TABELE KLIJENT
**********

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package forma;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import komunikacija.Komunikacija;
import konstante.Konstante;
import model.ModelTabeleKlijent;
import transfer.KlijentskiTransferObjekat;
import transfer.ServerskiTransferObjekat;

/**
 *
 * @author Nina777
 */
public class KlijentForma extends javax.swing.JFrame {

    /**
     * Creates new form KlijentForma
     */
    public KlijentForma() {
        initComponents();
        popuniCB();
        srediTabelu();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jtTabela = new javax.swing.JTable();
        jbtnDodaj = new javax.swing.JButton();
        jbtnObrisi = new javax.swing.JButton();
        jbtnSacuvaj = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jtTabela.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jtTabela);

        jbtnDodaj.setText("Dodaj");
        jbtnDodaj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnDodajActionPerformed(evt);
            }
        });

        jbtnObrisi.setText("Obrisi");
        jbtnObrisi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnObrisiActionPerformed(evt);
            }
        });

        jbtnSacuvaj.setText("Sacuvaj");
        jbtnSacuvaj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnSacuvajActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jbtnDodaj)
                        .addGap(112, 112, 112)
                        .addComponent(jbtnObrisi))
                    .addComponent(jbtnSacuvaj))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(169, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbtnDodaj)
                    .addComponent(jbtnObrisi))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jbtnSacuvaj)
                .addGap(23, 23, 23))
        );

        pack();
    }// </editor-fold>                        

    private void jbtnObrisiActionPerformed(java.awt.event.ActionEvent evt) {                                           
        ModelTabeleKlijent mtk = (ModelTabeleKlijent) jtTabela.getModel();

        int red = jtTabela.getSelectedRow();

        if (red == -1) {
            JOptionPane.showMessageDialog(this, "Odaberite red");
        } else {
            mtk.obrisiRed(red);
        }
    }                                          

    private void jbtnDodajActionPerformed(java.awt.event.ActionEvent evt) {                                          
        ModelTabeleKlijent mtk = (ModelTabeleKlijent) jtTabela.getModel();
        mtk.dodajRed();

//        moguce da ovde zove kombo za tabelu popuniCBuTabeli();
    }                                         

    private void jbtnSacuvajActionPerformed(java.awt.event.ActionEvent evt) {                                            
//        TODO: Odkomentarisati ovaj try-catch i pogledaj pod *****
//        validacije();
//        try {

            ModelTabeleKlijent mtk = (ModelTabeleKlijent) jtTabela.getModel();
            KlijentskiTransferObjekat kto = new KlijentskiTransferObjekat();
//            ArrayList<StavkaRacuna> listaStavki = mtk.getListaStavki();
//
//            int id = Integer.parseInt(jtfSifraRacuna.getText());
//
//            SimpleDateFormat sdf = new SimpleDateFormat("dd.MM.yyyy");
//            Date datum = sdf.parse(jtfDatum.getText());
//            Klijent kl = (Klijent) cbKlijent.getSelectedItem();
//            Double ukIzn = 0.0;
//            for (StavkaRacuna stav : listaStavki) {
//                ukIzn += stav.getIznos();
//            }
//
//            Racun racun = new Racun(id, datum, kl, ukIzn);
//
//            for (StavkaRacuna sr : listaStavki) {
//                sr.setRacun(racun);
//            }
//
//            ***** U ZAVISNOSTI OD TOGA STA CUVAMO salje se Konstanta.SACUVAJ_KLASA
//                  Pre toga je potrebno napuniti taj objekat
            
//            kto.setOperacija(Konstante.SACUVAJ_RACUN);
//            kto.setParametar(racun);
//
            Komunikacija.getInstanca().posaljiZahtev(kto);
            ServerskiTransferObjekat sto = Komunikacija.getInstanca().primiOdgovor();
            JOptionPane.showMessageDialog(this, sto.getPoruka());
//
//            kto.setOperacija(Konstante.SACUVAJ_STAVKE);
//            kto.setParametar(listaStavki);

            Komunikacija.getInstanca().posaljiZahtev(kto);
            sto = Komunikacija.getInstanca().primiOdgovor();
            JOptionPane.showMessageDialog(this, sto.getPoruka());

            boolean sacuvano = (boolean) sto.getOdgovor();
            if (sacuvano) {
//                promeniEnabled(true); ukoliko se menja da je neko polje disabled
                mtk.skloniPodatke();
            }
//        } catch (ParseException ex) {
//            Logger.getLogger(KlijentForma.class.getName()).log(Level.SEVERE, null, ex);
//        }
    }                                           

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(KlijentForma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(KlijentForma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(KlijentForma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(KlijentForma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new KlijentForma().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbtnDodaj;
    private javax.swing.JButton jbtnObrisi;
    private javax.swing.JButton jbtnSacuvaj;
    private javax.swing.JTable jtTabela;
    // End of variables declaration                   

    private void popuniCB() {
//        TODO: U zavisnosti od CB odaberi KLASU IZ DOMENA, i Konstanta VRATI_KLASA
//        KlijentskiTransferObjekat kto = new KlijentskiTransferObjekat();
//        kto.setOperacija(Konstante.VRATI_KLIJENTE);
//
//        Komunikacija.getInstanca().posaljiZahtev(kto);
//
//        ServerskiTransferObjekat sto = Komunikacija.getInstanca().primiOdgovor();
//
//        ArrayList<Klijent> lista = (ArrayList<Klijent>) sto.getOdgovor();
//
//        cbKlijent.removeAllItems();
//
//        for (Klijent kl : lista) {
//            cbKlijent.addItem(kl);
//        }
    }

    private void srediTabelu() {
        ModelTabeleKlijent mtk = new ModelTabeleKlijent();
        jtTabela.setModel(mtk);
    }

    private void popuniCBuTabeli() {
//        TODO: U zavisnosti od CB odaberi KLASU IZ DOMENA, i Konstanta VRATI_KLASA

//        jtTabela.setModel(mtk);
//        KlijentskiTransferObjekat kto = new KlijentskiTransferObjekat();
//        kto.setOperacija(Konstante.VRATI_INZENJERE);
//
//        Komunikacija.getInstanca().posaljiZahtev(kto);
//
//        ServerskiTransferObjekat sto = Komunikacija.getInstanca().primiOdgovor();
//
//        ArrayList<Inzenjer> listaInz = (ArrayList<Inzenjer>) sto.getOdgovor();
//
//        JComboBox kombo = new JComboBox();
//        kombo.removeAllItems();
//        for (Inzenjer inz : listaInz) {
//            kombo.addItem(inz);
//        }
//
//        TableColumnModel tcm = jtTabela.getColumnModel();
//        TODO: promeni broj kolone shodno tome koja se menja
//        TableColumn kolona = tcm.getColumn(1);
//        kolona.setCellEditor(new DefaultCellEditor(kombo));
    }

//    * metoda za promenu da se polje vise ne moze popuniti
    private void promeniEnabled(boolean b) {
//        jtfNaziv.setEnabled(b);

    }

//    *PRONADJI DUGME
//    private void jbtnPronadjiActionPerformed(java.awt.event.ActionEvent evt) {                                             
//        int sifra = Integer.parseInt(jtfSifraRacuna.getText());
//
//        KlijentskiTransferObjekat kto = new KlijentskiTransferObjekat();
//        kto.setOperacija(Konstante.VRATI_RACUN);
//        kto.setParametar(sifra);
//
//        Komunikacija.getInstanca().posaljiZahtev(kto);
//
//        ServerskiTransferObjekat sto = Komunikacija.getInstanca().primiOdgovor();
//        Racun racun = (Racun) sto.getOdgovor();
//        jtfDatum.setText(new SimpleDateFormat("dd.MM.yyyy").format(racun.getDatum()));
//
//        cbKlijent.setSelectedItem(racun.getKlijent());
//
//        kto.setOperacija(Konstante.VRATI_STAVKE);
//        Komunikacija.getInstanca().posaljiZahtev(kto);
//        ServerskiTransferObjekat sto2 = Komunikacija.getInstanca().primiOdgovor();
//        ArrayList<StavkaRacuna> listaStavki = (ArrayList<StavkaRacuna>) sto2.getOdgovor();
//
//        ArrayList<StavkaRacuna> listaStavkiModif = new ArrayList<>();
//
//        for (StavkaRacuna sr : listaStavki) {
//            if (sr.getRacun().getRacunID() == sifra) {
//                listaStavkiModif.add(sr);
//            }
//        }
//        ModelTabeleKlijent mtk = new ModelTabeleKlijent();
//        mtk.setListaStavki(listaStavkiModif);
//        jtTabela.setModel(mtk);
//    }
    
    public void validacije(){
//        try {
//            datumDo = sdf.parse(jtxtDatumDo.getText());
//            datumOd = sdf.parse(jtxtDatumOD.getText());
//        } catch (ParseException ex) {
//            JOptionPane.showMessageDialog(this, "Los format datumea");
//            return;
//        }
//        if(datumOd.compareTo(datumDo) != -1){
//         JOptionPane.showMessageDialog(this, "dat od veci");
//            return;
//        }
//        
//        if(datumOd.compareTo(new Date()) != 1){
//         JOptionPane.showMessageDialog(this, "dat od mora biti veci od sadanjeg datuma");
//            return;
//        }
    }
}


********** **********

SERVER - DBBROKER
**********

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package db;

import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import pomocneKlase.PrikazKlasa;

/**
 *
 * @author Nina777
 */
public class DBBroker {

    Connection konekcija;

    public void ucitajDrajver() {
        try {
            Class.forName("com.mysql.jdbc.Driver");
        } catch (ClassNotFoundException ex) {
            System.out.println("Nije se ucitao drajver");
        }
    }

    public void otvoriKonekciju() {
        try {
            // TODO: promeni ime baze ako treba, ako postoji grupa pogledaj
            konekcija = DriverManager.getConnection("jdbc:mysql://localhost:3306/prosoftjul16", "root", "");
            konekcija.setAutoCommit(false);
        } catch (SQLException ex) {
            System.out.println("Nije otvorena konekcija");
        }
    }

    public void zatvoriKonekciju() {
        try {
            konekcija.close();
        } catch (SQLException ex) {
            Logger.getLogger(DBBroker.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void komit() {
        try {
            konekcija.commit();
        } catch (SQLException ex) {
            Logger.getLogger(DBBroker.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void rollback() {
        try {
            konekcija.rollback();
        } catch (SQLException ex) {
            Logger.getLogger(DBBroker.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
// *metora vratiListu
//    public ArrayList<Angazovanje> vratiListuAngazovanja() {
//        String upit = "Select * from angazovanje";
//        ArrayList<Angazovanje> lista = new ArrayList<>();
//
//        try {
//            Statement s = konekcija.createStatement();
//            ResultSet rs = s.executeQuery(upit);
//            while (rs.next()) {
//                int angazovanjeID = rs.getInt("AngazovanjeID");
//                int inzID = rs.getInt("InzenjerID");
//                int projID = rs.getInt("ProjekatID");
//                Date datAng = rs.getDate("DatumAngazovanja");
//
//                Angazovanje ang = new Angazovanje(angazovanjeID, null, null, datAng); // TODO
//                lista.add(ang);
//            }
//        } catch (SQLException ex) {
//            Logger.getLogger(DBBroker.class.getName()).log(Level.SEVERE, null, ex);
//        }
//
//        return lista;
//    }

    
//      *sacuvaj metoda, u sacuvajAngazovanje pise kako se cuva ako povlaci ID iz neke druge tabele
//      *odradjeno preko MAXID
//      *TODO: promeni upit, shodno tome koja je tabela i koji upit(insert, update, delete, select)
//      *UPITI: 
//          *"INSERT INTO Tabela(Kolona1,Kolona2,Kolona3) VALUES (?,?,?)"
//          *"UPDATE Tabela SET Kolona1=?,Kolona2=?,Kolona3=? WHERE KolonaUslov=?"
//              Primer:
//                      String upit = "UPDATE Racun SET Datum=?,KlijentID=?,UkupanIznos=? WHERE RacunID=?";
//          *"SELECT * from Tabela"
//              Primer za slozeniji select:         
//                      String upit = "Select *, k.Naziv as NazivKlijenta, p.Naziv as NazivProizvoda from stavkaRacuna sr join racun r on sr.RacunID=r.RacunID join proizvod p on p.ProizvodID=sr.ProizvodID join klijent k on k.KlijentID=r.KlijentID";
//          *"DELETE FROM Tabela WHERE KolonaUslov=?"
//              Primer:
//                      String upit = "DELETE FROM StavkaRacuna WHERE RacunID=? AND RB=?";
    
//    public void sacuvajProjekat(Projekat proj) throws SQLException {
//        String upit = "INSERT INTO Projekat(ProjekatID,Naziv,DatumOd,DatumDo,VrstaID) VALUES (?,?,?,?,?)";
//        int maksID = vratiMaksIDDez();
//        PreparedStatement ps = konekcija.prepareStatement(upit);
//        ps.setInt(1, maksID+1);
//        ps.setString(2, proj.getNaziv());
//        ps.setDate(3, new Date(proj.getDatumOd().getTime()));
//        ps.setDate(4, new Date(proj.getDatumDo().getTime()));
//        ps.setInt(5, proj.getVrstaProjekta().getVrstaID());
//        
//        ps.executeUpdate();
//    }
//    public void sacuvajAngazovanje(Angazovanje ang) throws SQLException {
//        String upit = "INSERT INTO Angazovanje(AngazovanjeID,InzenjerID,ProjekatID,DatumAngazovanja) VALUES (?,?,?,?)";
//        ang.getProjekat().setProjekatID(vratiMaksIDDez()+1);
//        int maksID = vratiMaksIDDez2();
//        PreparedStatement ps = konekcija.prepareStatement(upit);
//        ps.setInt(1, maksID+1);
//        ps.setInt(2, ang.getInzenjer().getInzenjerID());
//        ps.setInt(3, vratiProjekatID());
//        ps.setDate(4, new Date(ang.getDatumAngazovanja().getTime()));
//        
//        ps.executeUpdate();
//    }
    
//    *ID za tabelu u kojoj se koristi kao spoljasnji kljuc
    
//    public int vratiProjekatID() {
//        String upit = "Select ProjekatID from projekat";
//        int prID = -1;
//
//        try {
//            Statement s = konekcija.createStatement();
//            ResultSet rs = s.executeQuery(upit);
//            while (rs.next()) {
//                prID = rs.getInt("ProjekatID");
//                
//            }
//        } catch (SQLException ex) {
//            Logger.getLogger(DBBroker.class.getName()).log(Level.SEVERE, null, ex);
//        }
//
//        return prID;
//    }

//      *MAXID
//    
//    private int vratiMaksIDDez() {
//        String upit = "Select max(ProjekatID) as maks from Projekat";
//        int maks = 0;
//
//        try {
//            Statement s = konekcija.createStatement();
//            ResultSet rs = s.executeQuery(upit);
//            while (rs.next()) {
//                maks = rs.getInt("maks");
//
//            }
//        } catch (SQLException ex) {
//            Logger.getLogger(DBBroker.class.getName()).log(Level.SEVERE, null, ex);
//        }
//
//        return maks;
//    }
    
   

    public ArrayList<PrikazKlasa> vratiListuPrikaz() {
//        TODO: promeni upit, prikaz klasa ima one atribute koji su kolone tabele na serverskoj strani
       String upit = "select p.*, vp.*, count(a.AngazovanjeID) as brAngazovanih    from projekat p join vrstaProjekta vp on p.VrstaID=vp.VrstaProjekta join angazovanje a on a.ProjekatID=p.ProjekatID group by a.AngazovanjeID";
        ArrayList<PrikazKlasa> lista = new ArrayList<>();

        try {
            Statement s = konekcija.createStatement();
            ResultSet rs = s.executeQuery(upit);
            while (rs.next()) {
                PrikazKlasa p = new PrikazKlasa();
//                TODO: dodaj p.setAtribut1(); ... atributi su kolone tabele servera
//                p.setProjekat(new Projekat(rs.getInt("ProjekatID"), rs.getString("Naziv"), rs.getDate("DatumOd"), rs.getDate("DatumDo"), null));
//                p.setVrstaProjekta(new VrstaProjekta(rs.getInt("VrstaID"), rs.getString("Naziv")));
//                p.setBrAngazovanih(rs.getInt("brAngazovanih"));
                
                lista.add(p);
            }
        } catch (SQLException ex) {
            Logger.getLogger(DBBroker.class.getName()).log(Level.SEVERE, null, ex);
        }

        return lista;

    }
    
//    *Filter: Ukoliko se filtrira i vraca prikazKlasa po parametrima, 
//              obratiti paznju na upit, sve ostalo ostaje isto kao i kod obicnog prikazaKlasa ^^^
    
//    public ArrayList<PrikazKlasa> vratiListuPrikaz(int pred, int ir) {
//       String upit = "select n.*, count(d.DezurstvoID) as ukBrDez, sum(p.TrajanjeIspita) as ukBrSati    from nastavnik n join dezurstvo d on n.NastavnikID=d.NastavnikID join predmet p on p.PredmetID=d.PredmetID join ispitniRok isp on isp.IspitniRokID=d.IspitniRokID where p.PredmetID="+pred+" AND isp.IspitniRokID="+ir+" group by n.NastavnikID";
//        ArrayList<PrikazKlasa> lista = new ArrayList<>();
//
//        try {
//            Statement s = konekcija.createStatement();
//            ResultSet rs = s.executeQuery(upit);
//            while (rs.next()) {
//                PrikazKlasa p = new PrikazKlasa();
//                p.setNastavnik(new Nastavnik(rs.getInt("NastavnikID"), rs.getString("Ime"), rs.getString("Prezime"), rs.getString("Zvanje")));
//                p.setUkupanBrojDezurstava(rs.getInt("ukBrDez"));
//                p.setUkupanBrojSati(rs.getInt("ukBrSati"));
//     
//                lista.add(p);
//            }
//        } catch (SQLException ex) {
//            Logger.getLogger(DBBroker.class.getName()).log(Level.SEVERE, null, ex);
//        }
//        return lista;
//    }
    
//    *IZBRISI I SACUVAJ iz liste, u zavisnosti od toga sta je u bazi
//    
//    public void sacuvajListuStavki(ArrayList<StavkaRacuna> sr) {
//        ArrayList<StavkaRacuna> listaIzBaze = vratiListuStavki();
//
//        for (StavkaRacuna stavka : sr) {
//            if (!listaIzBaze.contains(stavka)) {
//                try {
//                    sacuvajStavku(stavka);
//                } catch (SQLException ex) {
//                    Logger.getLogger(DBBroker.class.getName()).log(Level.SEVERE, null, ex);
//
//                }
//            }
//        }
//
//        for (StavkaRacuna stavka : listaIzBaze) {
//            if (!sr.contains(stavka)) {
//                for(StavkaRacuna srac : sr){
//                    if(srac.getRacun().getRacunID()==stavka.getRacun().getRacunID()){
//                        try {
//                            izbrisiStavku(stavka);
//                        } catch (SQLException ex) {
//                            Logger.getLogger(DBBroker.class.getName()).log(Level.SEVERE, null, ex);
//                        }
//                    }
//                }
//            }
//        }
//    }
//
//    public void sacuvajStavku(StavkaRacuna sr) throws SQLException {
//        String upit = "INSERT INTO StavkaRacuna(RacunID,RB,Kolicina,ProizvodID,Iznos) VALUES (?,?,?,?,?)";
//        int maksID = vratiMaksID2();
//        System.out.println("proizvodID" + vratiProizvodID());
//        System.out.println("RacunID "+sr.getRacun());
//        PreparedStatement ps = konekcija.prepareStatement(upit);
//        ps.setInt(1, sr.getRacun().getRacunID());
//        ps.setInt(2, maksID + 1);
//        ps.setInt(3, sr.getKolicina());
//        ps.setInt(4, sr.getProizvod().getProizvodID());
//        ps.setDouble(5, sr.getIznos());
//
//        ps.executeUpdate();
//    }
//
//    public void izbrisiStavku(StavkaRacuna sr) throws SQLException {
//        String upit = "DELETE FROM StavkaRacuna WHERE RacunID=? AND RB=?";
//
//        PreparedStatement ps = konekcija.prepareStatement(upit);
//        ps.setInt(1, sr.getRacun().getRacunID());
//        ps.setInt(2, sr.getRB());
//
//        ps.executeUpdate();
//    }
}

**********

SERVER - SERVER FORMA
**********

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package forma;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import logika.Kontroler;
import model.ModelTabeleServer;
import niti.NitOsvezi;
import pomocneKlase.PrikazKlasa;
import server.PokretanjeServera;

/**
 *
 * @author Nina777
 */
public class ServerForma extends javax.swing.JFrame {

    /**
     * Creates new form ServerForma
     */
    public ServerForma() {
        initComponents();
        pokreniServer();
        srediTabelu();
//        popuniCB();
        NitOsvezi no = new NitOsvezi(this);
        no.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jtTabela = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jtTabela.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jtTabela);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(15, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(149, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(64, 64, 64))
        );

        pack();
    }// </editor-fold>                        

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ServerForma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ServerForma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ServerForma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ServerForma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ServerForma().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jtTabela;
    // End of variables declaration                   

    private void pokreniServer() {
        PokretanjeServera ps = new PokretanjeServera();
        ps.start();
    }

    public void srediTabelu() {

        ArrayList<PrikazKlasa> lista = Kontroler.getInstanca().vratiPrikaz();
        ArrayList<PrikazKlasa> filtriranaLista = new ArrayList<>();

//        
        ModelTabeleServer mts = new ModelTabeleServer(filtriranaLista);
        jtTabela.setModel(mts);
    }
    
//    *COMBOBOX
//    private void popuniCB() {
//        List<Predmet> lpr = Kontroler.getInstanca().vratiListuPredmeta();
//
//        cbPredmet.removeAllItems();
//
//        for (Predmet p : lpr) {
//            cbPredmet.addItem(p);
//        }
//    }
}



//FILTERI

//  *CHECK BOX + COMBO BOX
//if(chbFiltriranje.isSelected()){
//            int ispRok = ((IspitniRok) cbIspitniRok.getSelectedItem()).getIspitniRokID();
//            int pred = ((Predmet) cbPredmet.getSelectedItem()).getPredmetID();
//            
//            lista = Kontroler.getInstanca().vratiPrikaz(pred, ispRok);
//        }


//  *CHECK BOX, da je na isti datum
//if (jCheckBox1.isSelected()) {
//
//            Date datum = null;
//            SimpleDateFormat sdf = new SimpleDateFormat("dd.MM.yyyy");
//            try {
//                datum = sdf.parse(jtfDatum.getText());
//            } catch (ParseException ex) {
//
//            }
//
//            ArrayList<Racun> listaRacuna = Kontroler.getInstanca().vratiListuRacuna();
//
//            if (datum == null) {
//                modifLista = lista;
//            } else {
//                for (PrikazKlasa pk : lista) {
//                    for(Racun r : listaRacuna){
//                        if(r.getKlijent().getKlijentID()==pk.getKlijent().getKlijentID() && datum.equals(r.getDatum())){
//                            modifLista.add(pk);
//                        }
//                    }
//                }
//            }
//            ModelTabeleServer mts = new ModelTabeleServer(modifLista);
//            jtTabela.setModel(mts);
//        } else {
//            ModelTabeleServer mts = new ModelTabeleServer(lista);
//            jtTabela.setModel(mts);
//
//        }


//  *DA SE NALAZI IZMEDJU 2 DATUMA
//if (lista != null) {
//            SimpleDateFormat sdf = new SimpleDateFormat("dd.MM.yyyy");
//
//            Date datumOd = null;
//            Date datumDo = null;
//
//            ArrayList<PrikazKlasa> filtriranaLista = new ArrayList<>();
//
//            try {
//                datumOd = sdf.parse(jtfDatumOd.getText());
//            } catch (ParseException ex) {
//            }
//
//            try {
//                datumDo = sdf.parse(jtfDatumDo.getText());
//            } catch (ParseException ex) {
//            }
//
//            if (datumOd == null && datumDo == null) {
//                filtriranaLista = lista;
//
//            } else if (datumOd != null && datumDo != null) {
//                for (PrikazKlasa pk : lista) {
//                    if (pk.getProjekat().getDatumOd().after(datumOd) && pk.getProjekat().getDatumDo().before(datumDo)) {
//                        filtriranaLista.add(pk);
//                    }
//                }
//            } else if (datumOd != null && datumDo == null) {
//                for (PrikazKlasa pk : lista) {
//                    if (pk.getProjekat().getDatumOd().after(datumOd)) {
//                        filtriranaLista.add(pk);
//                    }
//                }
//            } else if (datumOd == null && datumDo != null) {
//                for (PrikazKlasa pk : lista) {
//                    if (pk.getProjekat().getDatumDo().before(datumDo)) {
//                        filtriranaLista.add(pk);
//
//                    }
//                }
//            }
//
//        }


**********

SERVER - KONTROLOR
**********

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package logika;

import db.DBBroker;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import pomocneKlase.PrikazKlasa;

/**
 *
 * @author Nina777
 */
public class Kontroler {

    private static Kontroler instanca;
    DBBroker db;

    private Kontroler() {
        db = new DBBroker();
    }

    public static Kontroler getInstanca() {
        if (instanca == null) {
            instanca = new Kontroler();
        }
        return instanca;
    }

//    public ArrayList<Angazovanje> vratiListuAngazovanja() {
//        db.ucitajDrajver();
//        db.otvoriKonekciju();
//        ArrayList<Angazovanje> listaAng = db.vratiListuAngazovanja();
//        db.zatvoriKonekciju();
//        return listaAng;
//    }

    

//    public boolean sacuvajProjekat(Projekat proj) {
//        boolean sacuvano = false;
//        try {
//
//            db.ucitajDrajver();
//            db.otvoriKonekciju();
//            db.sacuvajProjekat(proj);
//
//            db.komit();
//            sacuvano = true;
//        } catch (SQLException ex) {
//            Logger.getLogger(Kontroler.class.getName()).log(Level.SEVERE, null, ex);
//
//            db.rollback();
//            sacuvano = false;
//        }
//        db.zatvoriKonekciju();
//        return sacuvano;
//    }
    
    
//    public int vratiProjekatID(){
//        db.ucitajDrajver();
//        db.otvoriKonekciju();
//        int prID = db.vratiProjekatID();
//        db.zatvoriKonekciju();
//        return prID;
//    }
    
//    *Ako je potrebna jedna stavka iz liste
//    public Racun vratiRacun(int sifra) {
//        db.ucitajDrajver();
//        db.otvoriKonekciju();
//        Racun rac = db.vratiRacun(sifra);
//        db.zatvoriKonekciju();
//        return rac;
//    }

    public ArrayList<PrikazKlasa> vratiPrikaz() {
        db.ucitajDrajver();
        db.otvoriKonekciju();
        ArrayList<PrikazKlasa> lista = db.vratiListuPrikaz();
        db.zatvoriKonekciju();
        return lista;

    }
    
//    * Filter: poziva se novi prikaz sa parametrima
//    public ArrayList<PrikazKlasa> vratiPrikaz(int pr, int ispR) {
//        db.ucitajDrajver();
//        db.otvoriKonekciju();
//        ArrayList<PrikazKlasa> lista = db.vratiListuPrikaz(pr, ispR);
//        db.zatvoriKonekciju();
//        return lista;
//
//    }

}


**********

SERVER - MODEL TABELE SERVER
**********

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package model;

import java.util.ArrayList;
import javax.swing.table.AbstractTableModel;
import pomocneKlase.PrikazKlasa;

/**
 *
 * @author Nina777
 */
public class ModelTabeleServer extends AbstractTableModel{

    ArrayList<PrikazKlasa> lista;

    public ModelTabeleServer(ArrayList<PrikazKlasa> lista) {
        this.lista = lista;
    }
    
    
    
    @Override
    public int getRowCount() {
        return lista.size();
    }

    @Override
    public int getColumnCount() {
        return 3; // TODO: promeni broj kolona, shodno tome koliko kolona ima u tabeli
    }

    @Override
    public Object getValueAt(int rowIndex, int columnIndex) {
        PrikazKlasa pk = lista.get(rowIndex);
        
        switch(columnIndex){
            // TODO: Klasa pk ima ove kolone kao svoje atribute, tako da ih samo treba pozvati
//            case 0: return pk.getProjekat();
//            case 1: return pk.getVrstaProjekta(); 
//            case 2: return pk.getBrAngazovanih();
            default:return "N/A";
        }
    }
//    TODO: promeni ime kolona u shodno onome kako se zove u ovom projektu
    String[] kolone = {"Projekat","VrstaProjekta","BrojAngazovanih"};

    @Override
    public String getColumnName(int column) {
        return kolone[column];
    }
    
}


**********

SERVER NIT OSVEZI
**********

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package niti;

import forma.ServerForma;
import static java.lang.Thread.sleep;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Nina777
 */
public class NitOsvezi extends Thread{
    
    ServerForma sf;

    public NitOsvezi(ServerForma sf) {
        this.sf = sf;
    }
    
    

    @Override
    public void run() {
        while (true) {            
            sf.srediTabelu();
            System.out.println("Osvezio");
            try {
                sleep(10000);
            } catch (InterruptedException ex) {
                Logger.getLogger(NitOsvezi.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
}



**********

SERVER - PRIKAZ KLASA
**********

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package niti;

import forma.ServerForma;
import static java.lang.Thread.sleep;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Nina777
 */
public class NitOsvezi extends Thread{
    
    ServerForma sf;

    public NitOsvezi(ServerForma sf) {
        this.sf = sf;
    }
    
    

    @Override
    public void run() {
        while (true) {            
            sf.srediTabelu();
            System.out.println("Osvezio");
            try {
                sleep(10000);
            } catch (InterruptedException ex) {
                Logger.getLogger(NitOsvezi.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
}


**********

SERVER - NIT KLIJENT
**********

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package server;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import transfer.KlijentskiTransferObjekat;
import transfer.ServerskiTransferObjekat;

/**
 *
 * @author Nina777
 */
public class NitKlijent extends Thread {

    Socket soket;

    public NitKlijent(Socket soket) {
        this.soket = soket;
    }

    @Override
    public void run() {
        while (true) {
            KlijentskiTransferObjekat kto = primiZahtev();
            ServerskiTransferObjekat sto = new ServerskiTransferObjekat();
            switch (kto.getOperacija()) {
                
                //TODO: case konstanti u zavisnosti sta se trazi u programu
                
//                case Konstante.VRATI_ANGAZOVANJA:
//                    ArrayList<Angazovanje> listaAng = Kontroler.getInstanca().vratiListuAngazovanja();
//                    sto.setOdgovor(listaAng);
//                    break;
//                case Konstante.VRATI_VRSTE_PROJEKATA:
//                    ArrayList<VrstaProjekta> listaVrPr = Kontroler.getInstanca().vratiListuVrstaProjekata();
//                    sto.setOdgovor(listaVrPr);
//                    break;
//                case Konstante.VRATI_INZENJERE:
//                    ArrayList<Inzenjer> listaInz = Kontroler.getInstanca().vratiListuInzenjera();
//                    sto.setOdgovor(listaInz);
//                    break;
//                case Konstante.SACUVAJ_PROJEKAT:
//                    Projekat proj = (Projekat) kto.getParametar();
//                    boolean sacuvano = Kontroler.getInstanca().sacuvajProjekat(proj);
//                    if (sacuvano) {
//                        sto.setPoruka("Sve uspesno sacuvano");
//                    } else {
//                        sto.setPoruka("Doslo je do greske, nije sacuvano");
//                    }
//                    sto.setOdgovor(sacuvano);
//                    break;
//                case Konstante.SACUVAJ_ANGAZOVANJE:
//                    Angazovanje ang = (Angazovanje) kto.getParametar();
//                    boolean sacuvano1 = Kontroler.getInstanca().sacuvajAngazovanje(ang);
//                    if (sacuvano1) {
//                        sto.setPoruka("Sve uspesno sacuvano");
//                    } else {
//                        sto.setPoruka("Doslo je do greske, nije sacuvano");
//                    }
//                    sto.setOdgovor(sacuvano1);
//                    break;
//                case Konstante.VRATI_ID_PROJEKTA:
//                    int prID = Kontroler.getInstanca().vratiProjekatID();
//                    sto.setOdgovor(prID);
//                    break;
            }
            posalji(sto);
        }
    }

    public void posalji(ServerskiTransferObjekat sto) {
        try {
            ObjectOutputStream oos = new ObjectOutputStream(soket.getOutputStream());
            oos.writeObject(sto);
        } catch (IOException ex) {
            Logger.getLogger(NitKlijent.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public KlijentskiTransferObjekat primiZahtev() {
        KlijentskiTransferObjekat kto = new KlijentskiTransferObjekat();
        try {
            ObjectInputStream ois = new ObjectInputStream(soket.getInputStream());
            kto = (KlijentskiTransferObjekat) ois.readObject();
        } catch (IOException ex) {
            Logger.getLogger(NitKlijent.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(NitKlijent.class.getName()).log(Level.SEVERE, null, ex);
        }

        return kto;
    }
}

**********

SERVER - POKRETANJE SERVERA
**********

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package server;

import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Nina777
 */
public class PokretanjeServera extends Thread{

    @Override
    public void run() {
        try {
            ServerSocket ss = new ServerSocket(9000);
            System.out.println("Server se pokrenuto");
            while (true) {                
                Socket s = ss.accept();
                System.out.println("Klijent se povezao");
                NitKlijent nk = new NitKlijent(s);
                nk.start();
        }
            } catch (IOException ex) {
            Logger.getLogger(PokretanjeServera.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    
    
}


**********

ZAJEDNICKI - DOMEN
**********



**********

ZAJEDNICKI - KONSTANTE
**********

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package konstante;

/**
 *
 * @author Nina777
 */
public class Konstante {
//    public static final int VRATI_VRSTE_PROJEKATA = 1;
//    public static final int VRATI_ANGAZOVANJA = 2;
//    public static final int VRATI_INZENJERE = 3;
//    public static final int SACUVAJ_ANGAZOVANJE = 4;
//    public static final int SACUVAJ_PROJEKAT = 5;
//    public static final int VRATI_ID_PROJEKTA = 6;
}


**********

ZAJEDNICKI - KLIJENTSKI TRANSFER OBJEKAT
**********

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package transfer;

import java.io.Serializable;

/**
 *
 * @author Nina777
 */
public class KlijentskiTransferObjekat implements Serializable{
    private int operacija;
    private Object parametar;

    public KlijentskiTransferObjekat() {
    }

    public KlijentskiTransferObjekat(int operacija, Object parametar) {
        this.operacija = operacija;
        this.parametar = parametar;
    }

    public Object getParametar() {
        return parametar;
    }

    public void setParametar(Object parametar) {
        this.parametar = parametar;
    }

    public int getOperacija() {
        return operacija;
    }

    public void setOperacija(int operacija) {
        this.operacija = operacija;
    }
    
    
}


**********

ZAJEDNICKI - SERVERSKI TRANSFER OBJEKAT
**********

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package transfer;

import java.io.Serializable;

/**
 *
 * @author Nina777
 */
public class ServerskiTransferObjekat implements Serializable{
    private String poruka;
    private Object odgovor;

    public ServerskiTransferObjekat() {
    }

    public ServerskiTransferObjekat(String poruka, Object odgovor) {
        this.poruka = poruka;
        this.odgovor = odgovor;
    }

    public Object getOdgovor() {
        return odgovor;
    }

    public void setOdgovor(Object odgovor) {
        this.odgovor = odgovor;
    }

    public String getPoruka() {
        return poruka;
    }

    public void setPoruka(String poruka) {
        this.poruka = poruka;
    }
    
    
}

**********

ZAJEDNICKI - PARSE DATE
**********

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package parseri;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Nina777
 */
public class ParseDate {
    
    public static Date vratiUtilDatum (String datum){
        SimpleDateFormat sdf = new SimpleDateFormat("dd.MM.yyyy");
        Date d = new Date();
        try {
            d = sdf.parse(datum);
        } catch (ParseException ex) {
            Logger.getLogger(ParseDate.class.getName()).log(Level.SEVERE, null, ex);
        }
        return d;
    }
    
    public static java.sql.Date vratiSqlDatum(Date utilDatum){
        java.sql.Date sql = new java.sql.Date(utilDatum.getTime());
        return sql;
    }
}



**********
KRAJ
